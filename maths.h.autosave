#ifndef MATHS_H
#define MATHS_H

#include <givaro/extension.h>
#include <givaro/givinteger.h>
#include <givaro/modular.h>

#include "point.h"
#include "curve.h"
#include "phopoint.h"
#include "patternmaker.h"
#include <list>
#include <vector>

typedef Modular<Integer> Field;
typedef Poly1Dom< Field, Dense> Polys;
typedef Poly1Dom<Polys,Dense> Bivariates;

using namespace Givaro;

class mathS
{
public:
    //empty :)
    mathS();

    // void static PrintPoint(Point p1);

    //Compute if number is prime
    //change the arrays O_o
    Integer static PollandRhoPrime(Integer number);
    //compute the value of polynomial
    //for certain x
    //for what do i need xs, i dont even remember
    Integer static ComputePolynomial(Integer Point, Integer mod);
    Integer static ComputePolynomial(Integer Point, Integer xs, Integer x);
    // check if gcd is equal to 1
    Integer static CheckGCDPho(Integer a, Integer b);
    //Absolute value of 2 numbers
    //i.e abs(a-b)
    Integer static Abs(Integer a, Integer b);
    // a power b
    Integer static Pow(Integer a, Integer b);
    //Algorithm for point
    Integer static PollandRho(Integer number);
    //generate base point with a and b are random numbers
    PhoPoint GenerateBasePoint(Point base, Point q, Curve c);
    //Generate new point according to ... to change!!!
    PhoPoint GenerateNewPoint(int counter, int period, PhoPoint Y, Point p, Point q, Curve c);
    //derived
    PhoPoint GenerateNewPoint(int counter, Point base, Point q, Curve c, PatternMaker pm);
    //generate array of points (move to private)
    void GenerateArray(int elements, Point base, Point q, Curve c, PhoPoint array[]);
    // O___O
    void CompareArray(PhoPoint array[],int elements, PhoPoint a, PhoPoint b);
    // Calculate d from array (move to private and rename)
    void CalculateD(PhoPoint p, PhoPoint q, Integer field, Integer result);

   // stuff for Schoffs alg
    std::vector<Integer> static ComputePrimeNumbers(Integer q);
    // stuff for Schoffs alg
    Integer static GenerateNextPrime(Integer q);
    int ComputeT(Integer q, Curve c);
    Bivariates::Element static CreatePolynomial(Integer power, Curve c);
    static std::list<Bivariates::Element> RingTest(Curve c, Bivariates::Element& el, int power);
    Field::Element static ComputeQModL(Integer q, Integer l);
    static std::list<Bivariates::Element> ComputeNotQ(Field::Element el, Curve c);
    void static SchoffsAlgorithm(Integer q, Curve c);
  //  void static CreatePolynomial(Integer power,Curve c, Bivariates::Element& el);
};

#endif // MATHS_H
